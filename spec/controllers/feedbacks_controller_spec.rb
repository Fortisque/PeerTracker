require 'rails_helper'
require 'database_cleaner'
DatabaseCleaner.strategy = :truncation

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe FeedbacksController, type: :controller do
  include Devise::TestHelpers

  before(:each) do
    DatabaseCleaner.clean
    @student = create(:student)
    @student2 = create(:student2)
    @professor = create(:professor)
    @course = create(:course)
    @team = create(:team)
    @assignment = create(:assignment)
    @course.assignments << @assignment
    @professor.add_role :professor
    @student.add_role :student
    @student2.add_role :student
    @team.users << @student
    @team.users << @student2
    @course.teams << @team
    @course.users << @student
    @course.users << @student2
    @assignment2 = create(:assignment2)
    @course.assignments << @assignment2
  end

  # This should return the minimal set of attributes required to create a valid
  # Feedback. As you add validations to Feedback, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {comments: "you are not very good at this", rating: 10, giver_id: @student.user_id, 
      receiver_id: @student2.user_id, assignment_id: @assignment.id, team_id: @team.id}
  }

  let(:invalid_attributes) {
    {comment: "you suck"}
  }

  let(:valid_attributes2) {
    {comments: "you are not verry good at this", rating: 10, giver_id: @student.user_id,
      receiver_id: @student2.user_id, assignment_id: @assignment2.id, team_id: @team.id}
  }


  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # FeedbacksController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    before(:each) do
      sign_in @student
    end

    it "assigns all feedbacks as @feedbacksgiven" do
      feedback = Feedback.create! valid_attributes
      @team.feedbacks << feedback
      @assignment.feedbacks << feedback
      get :index, {:course_id => @course.id, :team_id => @team.id, :assignment_id => @assignment.id}, valid_session
      expect(assigns(:feedbacksgiven)).to eq([feedback])
    end
  end

  describe "GET #new" do
    it "assigns a new feedback as @feedback" do
      sign_in @student
      get :new, {:course_id => @course.id, :team_id => @team.id, :assignment_id => @assignment.id}, valid_session
      expect(assigns(:feedback)).to be_a_new(Feedback)
    end
    it "redirects if feedback deadline has passed" do
      sign_in @student
      get :new, {:course_id => @course.id, :team_id => @team.id, :assignment_id => @assignment2.id}, valid_session
      expect(response).to redirect_to :action => "index"
    end
  end

  describe "GET #edit" do
    it "assigns the requested feedback as @feedback" do
      feedback = Feedback.create! valid_attributes
      get :edit, {:id => feedback.to_param, :course_id => @course.id, :team_id => @team.id, :assignment_id => @assignment.id}, valid_session
      expect(assigns(:feedback)).to eq(feedback)
    end

    it "redirects if deadline has passed" do
      feedback = Feedback.create! valid_attributes2
      get :edit, {:id => feedback.to_param, :course_id => @course.id, :team_id => @team.id, :assignment_id => @assignment2.id}, valid_session
      expect(flash[:error]).to be_present
      expect(response).to redirect_to :action => "index"

    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Feedback" do
        expect {
          post :create, {:feedback => valid_attributes, :user => {:user_id => @student2.user_id}, :course_id => @course.id, :team_id => @team.id, :assignment_id => @assignment.id}, valid_session
        }.to change(Feedback, :count).by(1)
      end
      
      it "redirects if team not found" do
        post :create, {:feedback => valid_attributes, :user => {:user_id => @student2.user_id}, :course_id => @course.id, :team_id => 20, :assignment_id => @assignment.id}, valid_session
      expect(response).to redirect_to :action => "index"

      end

      it "assigns a newly created feedback as @feedback" do
        post :create, {:feedback => valid_attributes, :user => {:user_id => @student2.user_id}, :course_id => @course.id, :team_id => @team.id, :assignment_id => @assignment.id}, valid_session
        expect(assigns(:feedback)).to be_a(Feedback)
        expect(assigns(:feedback)).to be_persisted
      end

      it "redirects to the created feedback" do
        post :create, {:feedback => valid_attributes, :user => {:user_id => @student2.user_id}, :course_id => @course.id, :team_id => @team.id, :assignment_id => @assignment.id}, valid_session
        expect(response).to redirect_to :action => "index"
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved feedback as @feedback" do
        post :create, {:feedback => invalid_attributes, :user => {:user_id => @student2.user_id}, :course_id => @course.id, :team_id => @team.id, :assignment_id => @assignment.id}, valid_session
        expect(assigns(:feedback)).to be_a_new(Feedback)
      end

      it "re-renders the 'new' template" do
        post :create, {:feedback => invalid_attributes, :user => {:user_id => @student2.user_id}, :course_id => @course.id, :team_id => @team.id, :assignment_id => @assignment.id}, valid_session
        expect(response).to redirect_to :action => "new"
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {comments: "you are good at this", rating: 90, giver_id: @student.user_id, 
        receiver_id: @student2.user_id, assignment_id: @assignment.id, team_id: @team.id} 

      }

      it "updates the requested feedback" do
        feedback = Feedback.create! valid_attributes
        put :update, {:id => feedback.to_param, :feedback => new_attributes, :course_id => @course.id, :team_id => @team.id, :assignment_id => @assignment.id}, valid_session
        feedback.reload
        expect(feedback.rating).to eq(new_attributes[:rating])
      end

      it "assigns the requested feedback as @feedback" do
        feedback = Feedback.create! valid_attributes
        put :update, {:id => feedback.to_param, :feedback => valid_attributes, :course_id => @course.id, :team_id => @team.id, :assignment_id => @assignment.id}, valid_session
        expect(assigns(:feedback)).to eq(feedback)
      end

      it "redirects to the feedback" do
        feedback = Feedback.create! valid_attributes
        put :update, {:id => feedback.to_param, :feedback => valid_attributes, :course_id => @course.id, :team_id => @team.id, :assignment_id => @assignment.id}, valid_session
        expect(response).to redirect_to :action => "index"
      end
    end

    context "with invalid params" do
      it "assigns the feedback as @feedback" do
        feedback = Feedback.create! valid_attributes
        put :update, {:id => feedback.to_param, :feedback => invalid_attributes, :course_id => @course.id, :team_id => @team.id, :assignment_id => @assignment.id}, valid_session
        expect(assigns(:feedback)).to eq(feedback)
      end

      it "re-renders the 'edit' template" do
        feedback = Feedback.create! valid_attributes
        put :update, {:id => feedback.to_param, :feedback => invalid_attributes, :course_id => @course.id, :team_id => @team.id, :assignment_id => @assignment.id}, valid_session
        expect(response).to redirect_to :action => "edit"
      end
    end
  end

end
